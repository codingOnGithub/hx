<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hotent.org.persistence.model.DefaultUser">
	<resultMap id="User" type="com.hotent.org.persistence.model.DefaultUser">
		<id property="userId" column="user_id_" jdbcType="VARCHAR" />
		<result property="account" column="account_" jdbcType="VARCHAR" />
		<result property="fullname" column="fullname_" jdbcType="VARCHAR" />
		<result property="status" column="status_" jdbcType="VARCHAR" />
		<result property="password" column="pwd_" jdbcType="VARCHAR" />
		<result property="sex" column="sex_" jdbcType="VARCHAR" />
		<result property="createBy" column="create_by_" jdbcType="VARCHAR" />
		<result property="createTime" column="create_time_" jdbcType="TIMESTAMP" />
		<result property="createSaasId" column="create_saas_id_" jdbcType="VARCHAR" />
		<result property="updateBy" column="update_by_" jdbcType="VARCHAR" />
		<result property="updateTime" column="update_time_" jdbcType="TIMESTAMP" />
		<result property="from" column="from_" jdbcType="VARCHAR" />
		<result property="mobile" column="mobile_" jdbcType="VARCHAR" />
		<result property="email" column="email_" jdbcType="VARCHAR" />
		<result property="address" column="address_" jdbcType="VARCHAR" />
		<result property="qq" column="qq_" jdbcType="VARCHAR" />
		<result property="phone" column="phone_" jdbcType="VARCHAR" />
	</resultMap>


	<insert id="create" parameterType="com.hotent.org.persistence.model.DefaultUser">
		INSERT INTO xog_user
		(user_id_,account_,fullname_,status_,pwd_,sex_,create_by_,create_time_,create_saas_id_,update_by_,update_time_,from_,mobile_,email_,address_,qq_,phone_)
		VALUES
		(#{userId,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, #{fullname,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR},
		#{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createSaasId,jdbcType=VARCHAR}, #{updateBy,jdbcType=VARCHAR},
		#{updateTime,jdbcType=TIMESTAMP}, #{from,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR},
		#{qq,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR})
	</insert>

	<select id="get" parameterType="java.lang.String" resultMap="User">
		SELECT * FROM xog_user
		WHERE
		user_id_=#{userId}
	</select>

	<select id="query" parameterType="java.util.Map" resultMap="User">
		SELECT * FROM xog_user
		<where>
			<if test="whereSql!=null">
				${whereSql}
			</if>
		</where>
		<if test="orderBySql!=null">
			ORDER BY ${orderBySql}
		</if>
		<if test="orderBySql==null">
			ORDER BY user_id_ DESC
		</if>
	</select>


	<update id="update" parameterType="com.hotent.org.persistence.model.DefaultUser">
		UPDATE xog_user SET
		account_=#{account,jdbcType=VARCHAR},
		fullname_=#{fullname,jdbcType=VARCHAR},
		status_=#{status,jdbcType=VARCHAR},
		pwd_=#{password,jdbcType=VARCHAR},
		sex_=#{sex,jdbcType=VARCHAR},
		create_by_=#{createBy,jdbcType=VARCHAR},
		create_time_=#{createTime,jdbcType=TIMESTAMP},
		create_saas_id_=#{createSaasId,jdbcType=VARCHAR},
		update_by_=#{updateBy,jdbcType=VARCHAR},
		update_time_=#{updateTime,jdbcType=TIMESTAMP},
		from_=#{from,jdbcType=VARCHAR},
		mobile_=#{mobile,jdbcType=VARCHAR},
		email_=#{email,jdbcType=VARCHAR},
		address_=#{address,jdbcType=VARCHAR},
		qq_=#{qq,jdbcType=VARCHAR},
		phone_=#{phone,jdbcType=VARCHAR}
		WHERE
		user_id_=#{userId}
	</update>

	<delete id="remove" parameterType="java.lang.String">
		DELETE FROM xog_user
		WHERE
		user_id_=#{userId}
	</delete>


	<select id="getByAccount" parameterType="java.lang.String" resultMap="User">
		SELECT * FROM xog_user
		WHERE
		account_=#{account}
	</select>


	<select id="queryByUserRelation" parameterType="java.util.Map" resultMap="User">
		SELECT a.* FROM xog_user a
		WHERE a.user_id_ IN
		(SELECT b.rel_user_id_ FROM
		xog_user_rel b
		WHERE b.user_id_=#{userId}
		AND b.rel_type_=#{relType}
		)
	</select>

	<select id="queryByGroupRelation" parameterType="java.util.Map" resultMap="User">
		SELECT a.* FROM xog_user a
		WHERE a.user_id_ IN (
		SELECT b.user_id_ FROM
		xog_user_group b
		WHERE b.group_id_=#{groupId}
		AND b.rel_type_=#{relType}
		)
	</select>


	<select id="queryByCriteria" parameterType="com.hotent.org.persistence.query.UserQuery$FindQuery" resultMap="User">
		SELECT RES.*
		<include refid="queryByCriteriaSql" />
		<include refid="orderByClauseSql" />
	</select>

	<select id="queryCountByCriteria" parameterType="com.hotent.org.persistence.query.UserQuery$FindQuery" resultType="Long">
		SELECT count(1)
		<include refid="queryByCriteriaSql" />
	</select>

	<sql id="queryByCriteriaSql">
		from XOG_USER RES
		<include refid="joinUserGroupRelationSql" />
		<include refid="joinUserRelationSql" />
		<include refid="joinAttributeValueSql" />
		<include refid="criteriaSql" />
	</sql>
	<update id="updateByUpdateQuery" parameterType="com.hotent.org.persistence.query.UserQuery$UpdateQuery">
		UPDATE XOG_USER RES
		<include refid="updateDataCaluseSql" />
		<include refid="criteriaSql" />
	</update>

	<delete id="deleteByDeleteQuery" parameterType="com.hotent.org.persistence.query.UserQuery$DeleteQuery">
		DELETE FROM XOG_USER 
		<include refid="noPrefixCriteriaSql" />
	</delete>

	<sql id="joinUserGroupRelationSql">
		<if test="joinUserGroupRelation">
			INNER JOIN XOG_USER_GROUP REL ON RES.USER_ID_ = REL.USER_ID_
			<foreach collection="oredUserGroupCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and REL.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and REL.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and REL.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and REL.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</if>
	</sql>
	<sql id="joinUserRelationSql">
		<if test="joinUserRelation">
			INNER JOIN XOG_USER_REL UREL ON UREL.USER_ID_ = RES.USER_ID_
			<foreach collection="oredUserRelationCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and UREL.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and UREL.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and UREL.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and UREL.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</if>
	</sql>
	<sql id="joinAttributeValueSql">
		<if test="joinAttributeValue">
			INNER JOIN XOG_ATTR_VAL ATTRVAL ON ATTRVAL.USER_ID_ = RES.USER_ID_
			<foreach collection="oredAttributeValueCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ATTRVAL.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ATTRVAL.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ATTRVAL.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ATTRVAL.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</if>
	</sql>

	<sql id="criteriaSql">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and res.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and res.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and res.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and res.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>	<sql id="noPrefixCriteriaSql">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>

	<sql id="updateDataCaluseSql">
		<set>
			<foreach collection="updateClause.dataClauses" item="clause" separator=",">
				${clause.property} #{clause.value}
			</foreach>
		</set>
	</sql>
	<sql id="orderByClauseSql">
		<if test="orderByClause.valid">
			ORDER BY
			<foreach collection="orderByClause.orderBys" item="clause" separator=",">
				${clause.property} ${clause.direction}
			</foreach>
		</if>
	</sql>
</mapper>