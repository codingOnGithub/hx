<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hotent.org.persistence.model.DefaultRelationType">
	<resultMap id="RelationType" type="com.hotent.org.persistence.model.DefaultRelationType">
		<id property="id" column="id_" jdbcType="VARCHAR"/>
		<result property="name" column="name_" jdbcType="VARCHAR"/>
		<result property="key" column="key_" jdbcType="VARCHAR"/>
		<result property="type" column="type_" jdbcType="VARCHAR"/>
		<result property="constType" column="const_type_" jdbcType="VARCHAR"/>
		<result property="currentName" column="current_name_" jdbcType="VARCHAR"/>
		<result property="relName" column="rel_name_" jdbcType="VARCHAR"/>
		<result property="currentDimId" column="current_dim_id_" jdbcType="VARCHAR"/>
		<result property="relDimId" column="rel_dim_id_" jdbcType="VARCHAR"/>
		<result property="status" column="status_" jdbcType="VARCHAR"/>
		<result property="memo" column="memo_" jdbcType="VARCHAR"/>
		<result property="createBy" column="create_by_" jdbcType="VARCHAR"/>
		<result property="createTime" column="create_time_" jdbcType="TIMESTAMP"/>
		<result property="createSaasId" column="create_saas_id_" jdbcType="VARCHAR"/>
		<result property="updateBy" column="update_by_" jdbcType="VARCHAR"/>
		<result property="updateTime" column="update_time_" jdbcType="TIMESTAMP"/>
		<result property="isBidirectonal" column="is_bidirectonal" jdbcType="VARCHAR"/>
	</resultMap>
	
	<insert id="create" parameterType="com.hotent.org.persistence.model.DefaultRelationType">
		INSERT INTO XOG_REL_TYPE
		(id_,name_,key_,type_,const_type_,current_name_,rel_name_,current_dim_id_,rel_dim_id_,status_,memo_,create_by_,create_time_,create_saas_id_,update_by_,update_time_,is_bidirectonal)
		VALUES 
		(#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{key,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{constType,jdbcType=VARCHAR}, #{currentName,jdbcType=VARCHAR}, #{relName,jdbcType=VARCHAR}, #{currentDimId,jdbcType=VARCHAR}, #{relDimId,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{memo,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createSaasId,jdbcType=VARCHAR}, #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{isBidirectonal,jdbcType=VARCHAR})
	</insert>
	
	<select id="get"   parameterType="java.lang.String" resultMap="RelationType">
		SELECT * FROM XOG_REL_TYPE 
		WHERE 
		id_=#{id}
	</select>
	
	<select id="query" parameterType="java.util.Map" resultMap="RelationType">
		SELECT * FROM XOG_REL_TYPE
		<where>
			<if test="whereSql!=null">
				${whereSql}
			</if>
		</where>
		<if test="orderBySql!=null">
			ORDER BY ${orderBySql}
		</if>
		<if test="orderBySql==null">
			ORDER BY id_ DESC
		</if>
	</select>
	
	<update id="update" parameterType="com.hotent.org.persistence.model.DefaultRelationType">
		UPDATE XOG_REL_TYPE SET
		name_=#{name,jdbcType=VARCHAR},
		key_=#{key,jdbcType=VARCHAR},
		type_=#{type,jdbcType=VARCHAR},
		const_type_=#{constType,jdbcType=VARCHAR},
		current_name_=#{currentName,jdbcType=VARCHAR},
		rel_name_=#{relName,jdbcType=VARCHAR},
		current_dim_id_=#{currentDimId,jdbcType=VARCHAR},
		rel_dim_id_=#{relDimId,jdbcType=VARCHAR},
		status_=#{status,jdbcType=VARCHAR},
		memo_=#{memo,jdbcType=VARCHAR},
		create_by_=#{createBy,jdbcType=VARCHAR},
		create_time_=#{createTime,jdbcType=TIMESTAMP},
		create_saas_id_=#{createSaasId,jdbcType=VARCHAR},
		update_by_=#{updateBy,jdbcType=VARCHAR},
		update_time_=#{updateTime,jdbcType=TIMESTAMP},
		is_bidirectonal=#{isBidirectonal,jdbcType=VARCHAR}
		WHERE
		id_=#{id}
	</update>
	
	<delete id="remove" parameterType="java.lang.String">
		DELETE FROM XOG_REL_TYPE 
		WHERE
		id_=#{id}
	</delete>
	
	
	<select id="queryByCriteria" parameterType="com.hotent.org.persistence.query.RelationTypeQuery$FindQuery" resultMap="RelationType">
		SELECT RES.*
		<include refid="queryByCriteriaSql" />
		<include refid="orderByClauseSql" />
	</select>
	
	<select id="queryCountByCriteria" parameterType="com.hotent.org.persistence.query.RelationTypeQuery$FindQuery" resultType="Long">
		SELECT count(1)
		<include refid="queryByCriteriaSql" />
	</select>
	
	<sql id="queryByCriteriaSql">
		from XOG_Rel_Type RES
		<include refid="joinUserGroupRelationSql"/>
		<include refid="joinUserRelationSql"/>
		<include refid="joinGroupRelationSql"/>
		<include refid="criteriaSql"/>
	</sql>
	<update id="updateByUpdateQuery" parameterType="com.hotent.org.persistence.query.RelationTypeQuery$UpdateQuery">
		UPDATE XOG_Rel_Type RES
		<include refid="updateDataCaluseSql"/>
		<include refid="criteriaSql"/>
	</update>
	
	<delete id="deleteByDeleteQuery" parameterType="com.hotent.org.persistence.query.RelationTypeQuery$DeleteQuery">
		DELETE FROM XOG_Rel_Type
		<include refid="noPrefixCriteriaSql"/>
	</delete>
		
	<sql id="joinUserGroupRelationSql">
		<if test="joinUserGroupRelation">
	INNER JOIN XOG_USER_GROUP REL ON RES.ID_ = REL.REL_TYPE_ID_
	<foreach collection="oredUserGroupCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
		<if test="criteria.valid">
			<trim prefix="(" prefixOverrides="and" suffix=")">
				<foreach collection="criteria.criteria" item="criterion">
					<choose>
						<when test="criterion.noValue">
							and REL.${criterion.condition}
						</when>
						<when test="criterion.singleValue">
							and REL.${criterion.condition} #{criterion.value}
						</when>
						<when test="criterion.betweenValue">
							and REL.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
						</when>
						<when test="criterion.listValue">
							and REL.${criterion.condition}
							<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
								#{listItem}
							</foreach>
						</when>
					</choose>
				</foreach>
			</trim>
		</if>
	</foreach>
</if>
	</sql>
	<sql id="joinUserRelationSql">
		<if test="joinUserRelation">
			INNER JOIN XOG_USER_REL UREL ON UREL.REL_TYPE_ID_ = RES.ID_
			<foreach collection="oredUserRelationCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and UREL.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and UREL.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and UREL.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and UREL.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
   		</if>
	</sql>
	<sql id="joinGroupRelationSql">
		<if test="joinGroupRelation">
			INNER JOIN XOG_group_rel grul  ON grul.REL_TYPE_ID_ = RES.ID_
			<foreach collection="oredGroupRelationCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and grul.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and grul.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and grul.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and grul.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
   		</if>
	</sql>
	
	<sql id="criteriaSql">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and res.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and res.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and res.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and res.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="noPrefixCriteriaSql">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="updateDataCaluseSql">
		<set>   
			<foreach collection="updateClause.dataClauses" item="clause" separator=",">
				${clause.property} #{clause.value}
			</foreach>
		</set>
	</sql>
	<sql id="orderByClauseSql">
		<if test="orderByClause.valid">
			ORDER BY
			<foreach collection="orderByClause.orderBys" item="clause" separator=",">
				${clause.property} ${clause.direction}
			</foreach>
		</if>
	</sql>
</mapper>