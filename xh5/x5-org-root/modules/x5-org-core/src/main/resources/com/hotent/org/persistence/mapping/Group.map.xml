<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hotent.org.persistence.model.DefaultGroup">
	<resultMap id="Group" type="com.hotent.org.persistence.model.DefaultGroup">
		<id property="groupId" column="group_id_" jdbcType="VARCHAR"/>
		<result property="name" column="name_" jdbcType="VARCHAR"/>
		<result property="key" column="key_" jdbcType="VARCHAR"/>
		<result property="dimId" column="dim_id_" jdbcType="VARCHAR"/>
		<result property="rankTypeKey" column="rank_type_key_" jdbcType="VARCHAR"/>
		<result property="status" column="status_" jdbcType="VARCHAR"/>
		<result property="desc" column="desc_" jdbcType="VARCHAR"/>
		<result property="sn" column="sn_" jdbcType="NUMERIC"/>
		<result property="parentId" column="parent_id_" jdbcType="VARCHAR"/>
		<result property="depth" column="depth_" jdbcType="NUMERIC"/>
		<result property="path" column="path_" jdbcType="VARCHAR"/>
		<result property="createBy" column="create_by_" jdbcType="VARCHAR"/>
		<result property="createTime" column="create_time_" jdbcType="TIMESTAMP"/>
		<result property="createSaasId" column="create_saas_id_" jdbcType="VARCHAR"/>
		<result property="updateBy" column="update_by_" jdbcType="VARCHAR"/>
		<result property="updateTime" column="update_time_" jdbcType="TIMESTAMP"/>
		<result property="form" column="form_" jdbcType="VARCHAR"/>
	</resultMap>
	
	<insert id="create" parameterType="com.hotent.org.persistence.model.DefaultGroup">
		INSERT INTO xog_group
		(group_id_,name_,key_,dim_id_,rank_type_key_,status_,desc_,sn_,parent_id_,depth_,path_,create_by_,create_time_,create_saas_id_,update_by_,update_time_,form_)
		VALUES 
		(#{groupId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{key,jdbcType=VARCHAR}, #{dimId,jdbcType=VARCHAR}, #{rankTypeKey,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{desc,jdbcType=VARCHAR}, #{sn,jdbcType=NUMERIC}, #{parentId,jdbcType=VARCHAR}, #{depth,jdbcType=NUMERIC}, #{path,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createSaasId,jdbcType=VARCHAR}, #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{form,jdbcType=VARCHAR})
	</insert>
	
	<select id="get"   parameterType="java.lang.String" resultMap="Group">
		SELECT * FROM xog_group 
		WHERE 
		group_id_=#{groupId}
	</select>
	
	
	<select id="query" parameterType="java.util.Map" resultMap="Group">
		SELECT * FROM xog_group
		<where>
			<if test="whereSql!=null">
				${whereSql}
			</if>
		</where>
		<if test="orderBySql!=null">
			ORDER BY ${orderBySql}
		</if>
		<if test="orderBySql==null">
			ORDER BY group_id_ DESC
		</if>
	</select>
	
	
	
	<update id="update" parameterType="com.hotent.org.persistence.model.DefaultGroup">
		UPDATE xog_group SET
		name_=#{name,jdbcType=VARCHAR},
		key_=#{key,jdbcType=VARCHAR},
		dim_id_=#{dimId,jdbcType=VARCHAR},
		rank_type_key_=#{rankTypeKey,jdbcType=VARCHAR},
		status_=#{status,jdbcType=VARCHAR},
		desc_=#{desc,jdbcType=VARCHAR},
		sn_=#{sn,jdbcType=NUMERIC},
		parent_id_=#{parentId,jdbcType=VARCHAR},
		depth_=#{depth,jdbcType=NUMERIC},
		path_=#{path,jdbcType=VARCHAR},
		create_by_=#{createBy,jdbcType=VARCHAR},
		create_time_=#{createTime,jdbcType=TIMESTAMP},
		create_saas_id_=#{createSaasId,jdbcType=VARCHAR},
		update_by_=#{updateBy,jdbcType=VARCHAR},
		update_time_=#{updateTime,jdbcType=TIMESTAMP},
		form_=#{form,jdbcType=VARCHAR}
		WHERE
		group_id_=#{groupId}
	</update>
	
	<delete id="remove" parameterType="java.lang.String">
		DELETE FROM xog_group 
		WHERE
		group_id_=#{groupId}
	</delete>
	
	<delete id="removeByGroupKey" parameterType="java.lang.String">
		DELETE FROM xog_group 
		WHERE
		key_=#{groupKey}
	</delete>
	
	
	<!-- Operate by criteria -->
	
	<select id="queryByCriteria" parameterType="com.hotent.org.persistence.query.GroupQuery$FindQuery" resultMap="Group">
		SELECT RES.*
		<include refid="queryByCriteriaSql" />
		<include refid="orderByClauseSql"/>
	</select>
	
	<select id="queryCountByCriteria" parameterType="com.hotent.org.persistence.query.GroupQuery$FindQuery" resultType="Long">
		SELECT count(1)
		<include refid="queryByCriteriaSql" />
	</select>

	<sql id="queryByCriteriaSql">
		from XOG_Group RES
		<include refid="joinGroupRelationSql"/>
   		<include refid="joinUserGroupRelationSql"/>
   		<include refid="joinAttributeValueSql"/>
		<include refid="criteriaSql"/>
	</sql>
	<update id="updateByUpdateQuery" parameterType="com.hotent.org.persistence.query.GroupQuery$UpdateQuery">
		UPDATE XOG_Group RES
		<include refid="updateDataCaluseSql"/>
		<include refid="criteriaSql"/>
	</update>
	
	<delete id="deleteByDeleteQuery" parameterType="com.hotent.org.persistence.query.GroupQuery$DeleteQuery">
		DELETE FROM XOG_Group 
		<include refid="noPrefixCriteriaSql"/>
	</delete>
	
	<sql id="joinUserGroupRelationSql">
		<if test="joinUserGroupRelation">
			INNER JOIN XOG_USER_GROUP REL ON RES.Group_ID_ = REL.Group_ID_
			<foreach collection="oredUserGroupCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and REL.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and REL.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and REL.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and REL.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
   		</if>
	</sql>
	<sql id="joinGroupRelationSql">
		<if test="joinGroupRelation">
			INNER JOIN XOG_Group_REL UREL ON UREL.Group_ID_ = RES.Group_ID_
			<foreach collection="oredGroupRelationCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and UREL.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and UREL.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and UREL.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and UREL.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
   		</if>
	</sql>
	<sql id="joinAttributeValueSql">
		<if test="joinAttributeValue">
			INNER JOIN XOG_ATTR_VAL ATTRVAL ON ATTRVAL.Group_ID_ = RES.Group_ID_
			<foreach collection="oredAttributeValueCriteria" item="criteria" open="and (" close=")" separator="or" index="idx">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ATTRVAL.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ATTRVAL.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ATTRVAL.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ATTRVAL.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
   		</if>
	</sql>
	
	<sql id="criteriaSql">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and res.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and res.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and res.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and res.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
		<sql id="noPrefixCriteriaSql">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="updateDataCaluseSql">
		<set>   
			<foreach collection="updateClause.dataClauses" item="clause" separator=",">
				${clause.property} #{clause.value}
			</foreach>
		</set>
	</sql>
	
	<sql id="orderByClauseSql">
		<if test="orderByClause.valid">
			ORDER BY 
			<foreach collection="orderByClause.orderBys" item="clause" separator=",">
				${clause.property} ${clause.direction}
			</foreach>
		</if>
	</sql>
	
</mapper>